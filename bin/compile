#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail

# Build related variables.
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# From Heroku's suggested docs.
export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
export_env_dir "$ENV_DIR"

# Log Function
log() {
    echo "-----> $1"
}

# Install multirust
if [[ ! -d "$CACHE_DIR/multirust" ]]; then
    log "Fetching multirust..."
    git clone --recursive https://github.com/brson/multirust /tmp/multirust-repo
    cd /tmp/multirust-repo
    git submodule update --init
    ./build.sh
    ./install.sh --destdir="$CACHE_DIR/multirust" --prefix=""
else
    log "Pre-existing multirust"
fi
export PATH="$PATH:$CACHE_DIR/multirust/bin"

# Change where `multirust` places it's `.multirust` dir from the default `$HOME/.multirust`
export MULTIRUST_HOME="$CACHE_DIR/.multirust"

# Use Multirust
if [ -n "$RUST_VERSION" ]; then
  MULTIRUST_VERSION="$RUST_VERSION"
else
  MULTIRUST_VERSION="$(cat $BUILD_DIR/Cargo.toml | grep -ohzP "(?<=\[target.heroku\])[^\[]*" | grep -ohzP "(?<=version = \")[^\"]*")" || true
fi

if [[ -z "$MULTIRUST_VERSION" ]]; then
    log "Setting version to \"nightly\" (default)"
    multirust default "nightly"
    multirust update "nightly"
else
    log "Setting version to \"$MULTIRUST_VERSION\""
    multirust default "$MULTIRUST_VERSION"
    multirust update "$MULTIRUST_VERSION"
fi

# Change into correct directory
cd "$BUILD_DIR"

# Build the Rust app
log "Compiling application..."
CARGO_HOME="$CACHE_DIR/cargo" cargo build --release

# Remove the cache
log "Deleting target/release/deps..."
rm -r "target/release/deps"
