#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail

# Build related variables.
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# From Heroku's suggested docs.
export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
export_env_dir "$ENV_DIR"

# Log Function
log() {
    echo "-----> $1"
}

# rust-lang-nursery/rustup.rs#618
exec_cmd() {
    CARGO_HOME="$CACHE_DIR/.cargo" RUSTUP_HOME="$CACHE_DIR/.rustup" bash -c "$1"
}

# Select the Rust version
if [ -n "$RUST_VERSION" ]; then
    RUSTUP_VERSION="$RUST_VERSION"
else
    RUSTUP_VERSION="$(cat $BUILD_DIR/Cargo.toml | grep -ohzP "(?<=\[target.heroku\])[^\[]*" | grep -ohzP "(?<=version = \")[^\"]*")" || true
fi

# Install rustup.sh
if [[ ! -d "$CACHE_DIR/.rustup" ]]; then
    log "Fetching rustup.sh..."
    exec_cmd "curl https://sh.rustup.rs -sSf | sh -s -- -y"
else
    log "Pre-existing rustup.sh"
fi

# Add rustup.sh binaries to $PATH
export PATH="$PATH:$CACHE_DIR/.cargo/bin"

if [[ -z "$RUSTUP_VERSION" ]]; then
    log "Setting version to \"nightly\" (default)"
    exec_cmd "rustup install nightly"
    exec_cmd "rustup default nightly"
else
    log "Setting version to \"$RUSTUP_VERSION\""
    exec_cmd "rustup install \"$RUSTUP_VERSION\""
    exec_cmd "rustup default \"$RUSTUP_VERSION\""
fi

# Check if there are updates
log "Updating rustup.sh..."
exec_cmd "rustup update"

# Change into correct directory
cd "$BUILD_DIR"

# Build the Rust app
log "Compiling application..."
exec_cmd "cargo build --release"

# Remove the cache
log "Deleting target/release/deps..."
rm -r "target/release/deps"
